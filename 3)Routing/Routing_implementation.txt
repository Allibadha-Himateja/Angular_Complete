// 
routing mechanism is a process of establishing the communication between more then one components


WE KNOW THAT THE INITIAL ENTRY FOR ANY ANGULAR APPLICATION IS DONE VIA INDEX.HTML
inside that index.html we are having 

<app-root></app-root> root component selector
the rendering of root components html is done here

->inside the app component's html we are having another Routing mechanism for introduction new child components inside the app component
-> that is done using the <router-outlet/> tag

this tag is responsible for holding all other components
it is similar to of div in react and as well as the js

ALL THE OTHER COMPONENTS WILL BE RENDERED INSIDE THE ROUTER-OUTLET AND
APP COMPONENT ACT AS BASE COMPONENT OF THE APPLICATION.

///
CREATING A CHILD COMPONENT INSIDE ANGULAR
we gotta use the command line for this(angular cli)
ng g c
ng generate child [component_name]

example:
	ng g c Items

	we are gonna consider the first app for this or else we can create a new app
	Second App
	so we have created a new application just to understand the mechanism of routing 
	between multiple components

///
WE NEED TO ADD THE OTHER COMPONENTS IN THE ROOT COMPONENT(APP COMPONENT)
we can do that by

STEP1:  import the related component in the app-component.ts via
	
	import { ItemsComponent } from "./items/items.component";

STEP2: and we have to use the selector inside the app-component.html

	something like
	
	<app-items><app-items/>


/// NOW WHAT IS THE DIFFERENCE BETWEEN THE COMPONENT SELECTOR AND ROUTER-OUTLET

-> in the component selector usage we can only be able to import the child component inside app component 
	meaning that we can only add something into another thing

-> we cant actually perform the routing mechnism form one component to another
	meaning that only one of these components must be rendered at one time

->THAT IS THE USE CASE OF ROUTER-OUTLET
	it will let you perform the routing instead of adding the component inside one another

/// CLASSICAL EXAMPLE OF ROUTING MECHANISM IN ANGULAR IS 

assume we are having three components
->home
->about 
->contact

our requirement is to manage the routing of page 
that is home ,about and contact
using the router-outlet

the main components which are used for this routing are
->Routes
->provideRouter
->router-outlet

STEPS:
1) first create all the required components like home,about and contact

2)second make the routes inside the app.routes.ts file

	something like
	
	import {Routes} from '@angular/router';	
	
	const routes:Routes=[
		{path:'',component:HomeComponent},
		{path:'about',component:AboutComponent},
		{path:'contact',component:ContactComponent}
	];
		
	THIS IS THE STRUCTURE FOR THE app.routes.ts file

3) third thing is we have to setup the routing configuration inside the app.config.ts file
	

	inside the app.config.ts we are having something fishy(i dont know about it)

	import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
	import { provideRouter } from '@angular/router';

	import { routes } from './app.routes';

	export const appConfig: ApplicationConfig = {
  		providers: [provideZoneChangeDetection({ eventCoalescing: true }),
  		provideRouter(routes)]
	};


	probably we are going to use the appConfig inside something later 

	THE MOST IMPORTANT PART FOR ROUTING IS CONFIGURING THE ROUTING

	THE CONFIGURATION CAN BE DONE USING THE 
	provideRouter

	inside of ApplicationConfig =[
	providers:[provideZoneChangeDetection({eventCoalesing:true}),
	provideRouter(routes) <--------------------------
	];

	

	Where Is appConfig Used?
		The appConfig is passed to the bootstrapApplication function in main.ts, which bootstraps the root component of your 				application and applies the configuration globally.

4) finally we can able to keep the nav tags
	or the hyperlinks inside the app component

	<nav>
  		<a routerLink="/" routerLinkActive="active">Home</a><br>
  		<a routerLink="about" routerLinkActive="active">About</a><br>
  		<a routerLink="contact" routerLinkActive="active">Contact</a><br>
	</nav>

	kani we got a problem with this 
	----------------------------------------------------------THE PROBLEM IS THE INSIDE THE ANCHOR TAG WE HAVE USED THE 
	routerLink ANNI 
	THE RESULT OF THIS TAG IS JUST GIVING
	SIMPLE TEXT---------------------------------------------------------------------------------------------------------------
	
	---------------------------------RESOLVED------------------
	the solution for that is we have to import the routerLink module in the app-component.ts
